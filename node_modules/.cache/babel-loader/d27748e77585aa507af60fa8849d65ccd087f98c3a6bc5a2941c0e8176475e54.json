{"ast":null,"code":"globalThis.jotaiAtomCache = globalThis.jotaiAtomCache || {\n  cache: new Map(),\n  get(name, inst) {\n    if (this.cache.has(name)) {\n      return this.cache.get(name);\n    }\n    this.cache.set(name, inst);\n    return inst;\n  }\n};\nimport { ProductColor, ProductSize } from \"../types/Products\";\nconst sizes = Object.values(ProductSize);\nconst colors = Object.values(ProductColor);\nconst generateProducts = count => {\n  const products = [];\n  for (let i = 1; i <= count; i++) {\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    const size = sizes[Math.floor(Math.random() * sizes.length)];\n    const product = {\n      id: i.toString(),\n      title: `${color} ${size} Shirt`,\n      size: sizes[Math.floor(Math.random() * sizes.length)],\n      color,\n      price: Math.floor(Math.random() * 1000) + 1,\n      imgUrl: `./assets/${color}Shirt.png`\n    };\n    products.push(product);\n  }\n  return products;\n};\nconst ProductData = generateProducts(100);\nconst ProductSaleData = ProductData.slice(0, 10);\nexport default ProductData;\nexport { ProductSaleData };","map":{"version":3,"names":["ProductColor","ProductSize","sizes","Object","values","colors","generateProducts","count","products","i","color","Math","floor","random","length","size","product","id","toString","title","price","imgUrl","push","ProductData","ProductSaleData","slice"],"sources":["/home/jaij/check/nx-rspack-microfrontend-demo/apps/mfe-monorepo/src/app/data/ProductData.ts"],"sourcesContent":["import { ProductColor, ProductSize, type Product } from \"../types/Products\";\n\nconst sizes = Object.values(ProductSize);\nconst colors = Object.values(ProductColor);\n\nconst generateProducts = (count: number): Product[] => {\n\tconst products: Product[] = [];\n\n\tfor (let i = 1; i <= count; i++) {\n\t\tconst color = colors[Math.floor(Math.random() * colors.length)];\n\t\tconst size = sizes[Math.floor(Math.random() * sizes.length)];\n\n\t\tconst product: Product = {\n\t\t\tid: i.toString(),\n\t\t\ttitle: `${color} ${size} Shirt`,\n\t\t\tsize: sizes[Math.floor(Math.random() * sizes.length)],\n\t\t\tcolor,\n\t\t\tprice: Math.floor(Math.random() * 1000) + 1,\n\t\t\timgUrl: `./assets/${color}Shirt.png`,\n\t\t};\n\n\t\tproducts.push(product);\n\t}\n\n\treturn products;\n};\n\nconst ProductData = generateProducts(100);\nconst ProductSaleData = ProductData.slice(0, 10);\n\nexport default ProductData;\nexport { ProductSaleData };\n"],"mappings":";;;;;;;;;;AAAA,SAASA,YAAY,EAAEC,WAAW,QAAsB,mBAAmB;AAE3E,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAACH,WAAW,CAAC;AACxC,MAAMI,MAAM,GAAGF,MAAM,CAACC,MAAM,CAACJ,YAAY,CAAC;AAE1C,MAAMM,gBAAgB,GAAIC,KAAa,IAAgB;EACtD,MAAMC,QAAmB,GAAG,EAAE;EAE9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAChC,MAAMC,KAAK,GAAGL,MAAM,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,MAAM,CAACS,MAAM,CAAC,CAAC;IAC/D,MAAMC,IAAI,GAAGb,KAAK,CAACS,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGX,KAAK,CAACY,MAAM,CAAC,CAAC;IAE5D,MAAME,OAAgB,GAAG;MACxBC,EAAE,EAAER,CAAC,CAACS,QAAQ,CAAC,CAAC;MAChBC,KAAK,EAAE,GAAGT,KAAK,IAAIK,IAAI,QAAQ;MAC/BA,IAAI,EAAEb,KAAK,CAACS,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGX,KAAK,CAACY,MAAM,CAAC,CAAC;MACrDJ,KAAK;MACLU,KAAK,EAAET,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;MAC3CQ,MAAM,EAAE,YAAYX,KAAK;IAC1B,CAAC;IAEDF,QAAQ,CAACc,IAAI,CAACN,OAAO,CAAC;EACvB;EAEA,OAAOR,QAAQ;AAChB,CAAC;AAED,MAAMe,WAAW,GAAGjB,gBAAgB,CAAC,GAAG,CAAC;AACzC,MAAMkB,eAAe,GAAGD,WAAW,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAEhD,eAAeF,WAAW;AAC1B,SAASC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}